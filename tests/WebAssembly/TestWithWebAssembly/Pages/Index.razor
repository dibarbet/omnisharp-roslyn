@page "/"
@using OmniSharp.Services
@using OmniSharp.WebAssembly
@using System.Text.RegularExpressions
@using System.Web
@using TestWithWebAssembly.Client

<PageTitle>Index</PageTitle>

<h2><u>Initialize Server</u></h2>

<EditForm Model="@initializationOptions" OnValidSubmit="@HandleValidInitializeAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    Choose compiler log<br />
    <InputFile accept=".compilerlog" OnChange="@LoadFiles" />
    <br />
    <InputText id="workspacePath" placeholder="Workspace path" @bind-Value="initializationOptions.WorkspacePath" />
    <br />
    <br />
    <button type="submit" disabled="@(IsServerRunning)">@(IsServerRunning ? "Already started" : "Initialize server")</button>
</EditForm>
<br />

<h2><u>Send Request</u></h2>

<EditForm Model="@inputText" OnValidSubmit="@HandleSubmitRequest">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="requestJson" placeholder="Request json" @bind-Value="inputText.RequestJson" />
    <br />
    <br />
    <button type="submit" disabled="@(!IsServerRunning)">@(!IsServerRunning ? "Waiting for start..." : "Run request")</button>
</EditForm>
<br />

<h2><u>Server Logs</u></h2>

<p>
    @foreach (var line in Text)
    {
        <br />
        @((MarkupString)Regex.Replace(
            HttpUtility.HtmlEncode(@line), "\r?\n|\r", "<br />"))
    }
</p>

@code
{
    private InitializationOptions initializationOptions = new();

    private InputJsonRequest inputText = new();

    public bool IsServerRunning = false;
    public Stack<string> Text { get; } = new Stack<string>();

    private ILoggerProvider _loggerProvider = default!;
    private ILogger _logger = default!;

    protected override Task OnInitializedAsync()
    {
        _loggerProvider = new RazorLoggerProvider(this);
        _logger = _loggerProvider.CreateLogger("Index");
        return Task.CompletedTask;
    }

    private Task LoadFiles(InputFileChangeEventArgs e)
    {
        initializationOptions.CompilerLog = e.File;
        return Task.CompletedTask;
    }

    private async Task HandleValidInitializeAsync()
    {
        _logger.LogInformation("Initializing server...");
        var memoryStream = new MemoryStream();
        var stream = initializationOptions.CompilerLog!.OpenReadStream(maxAllowedSize: 2147483648);
        await stream.CopyToAsync(memoryStream);
        var response = await OmniSharp.WebAssembly.Program.InitializeAsync(memoryStream.ToArray(), initializationOptions.WorkspacePath!, new StreamReader(new MemoryStream()), new RazorLogger(this, "Output"), _loggerProvider!);
        if (response == "done")
        {
            IsServerRunning = true;
        }
        new RazorLogger(this, "Result").LogInformation(response);
    }

    private Task HandleSubmitRequest()
    {
        _logger.LogInformation("Submitting request");
        return OmniSharp.WebAssembly.Program.InvokeRequestAsync(inputText.RequestJson!);
    }

    class RazorLoggerProvider : ILoggerProvider
    {
        private readonly Index _page;
        public RazorLoggerProvider(Index page)
        {
            _page = page;
        }

        public ILogger CreateLogger(string categoryName)
        {
            return new RazorLogger(_page, categoryName);
        }

        public void Dispose()
        {
        }
    }

    class RazorLogger : ILogger, ISharedTextWriter
    {
        private readonly string _categoryName;
        private readonly Index _page;

        public RazorLogger(Index page, string categoryName)
        {
            _categoryName = categoryName;
            _page = page;
        }

        public IDisposable? BeginScope<TState>(TState state) where TState : notnull
        {
            return NullScope.Instance;
        }

        public bool IsEnabled(LogLevel logLevel)
        {
            return true;
        }

        public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter)
        {
            if (exception != null)
            {
                _page.Text.Push($"[{logLevel}][{_categoryName}]{formatter(state, exception)}{Environment.NewLine}Exception:{exception}");
            }
            else if (eventId == default)
            {
                _page.Text.Push($"[{logLevel}][{_categoryName}]{formatter(state, exception)}");
            }
            else
            {
                _page.Text.Push($"[{logLevel}][{_categoryName}][{eventId}]{formatter(state, exception)}");
            }
            _page.StateHasChanged();
        }

        public void WriteLine(object value)
        {
            this.LogInformation(value.ToString());
        }
    }

}
